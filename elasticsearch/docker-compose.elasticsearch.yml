---
version: "3.8"

x-elasticsearch-base-image: &elasticsearch-base-image
  image: luzblu3s/elasticsearch:8.5.3
  hostname: "{{.Node.Hostname}}"

x-elasticsearch-networks: &networks
  networks:
    - elasticsearch
    - traefik

x-ulimits: &ulimits
  ulimits:
    memlock:
      soft: -1
      hard: -1

x-deploy-restart-policy: &restart-policy
  restart_policy:
    condition: ${DOCKER_DEFAULT_RESTART_POLICY}
    delay: ${DOCKER_DEFAULT_DELAY}
    max_attempts: ${DOCKER_DEFAULT_MAX_ATTEMPTS}

x-healthcheck-es: &healthcheck
  healthcheck:
    test: curl -fs http://localhost:9200/_cat/health || false
    interval: 30s
    timeout: 5s
    retries: 3
    start_period: 300s

x-elasticsearch-default-env: &elasticsearch-default-env
  node.roles: "[ data ]"
  bootstrap.memory_lock: ${ES_BOOTSTRAP_MEMORY_LOCK}
  discovery.seed_hosts: ${ES_DISCOVERY_SEED_HOSTS}
  cluster.initial_master_nodes: ${ES_INITIAL_MASTER_NODES}
  discovery.probe.connect_timeout: ${ES_DEFAULT_TIMEOUT}
  ES_JAVA_OPTS: ${ES_JAVA_OPTS}
  xpack.license.self_generated.type: trial
  xpack.monitoring.collection.enabled: "true"
  xpack.security.enabled: "false"
  cluster.name: ${ES_CLUSTER_NAME}
  network.host: ${ES_NETWORK_HOST}
  action.destructive_requires_name: "true"


services:
  coordinator:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    environment:
      <<: *elasticsearch-default-env
      node.name: coordination
      node.roles: "[ master, voting_only ]"
      ES_JAVA_OPTS: ${ES_JAVA_MASTER_OPTS}
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.coordinator == true
      mode: replicated
      replicas: ${ES_REPLICAS_COORDINATOR}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_COORDINATOR}
      <<: *restart-policy

  master-1:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_master_1:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      node.name: master-1
      node.roles: "[ master ]"
      ES_JAVA_OPTS: ${ES_JAVA_MASTER_OPTS}
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.master == true
      mode: replicated
      replicas: ${ES_REPLICAS_MASTER_1}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_MASTER_1}
      <<: *restart-policy

  master-2:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_master_2:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      node.name: master-2
      node.roles: "[ master, remote_cluster_client ]"
      ES_JAVA_OPTS: ${ES_JAVA_MASTER_OPTS}
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.master == true
      mode: replicated
      replicas: ${ES_REPLICAS_MASTER_2}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_MASTER_2}
      <<: *restart-policy

  master-3:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_master_3:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      node.name: master-3
      node.roles: "[ master, remote_cluster_client ]"
      ES_JAVA_OPTS: ${ES_JAVA_MASTER_OPTS}
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.master == true
      mode: replicated
      replicas: ${ES_REPLICAS_MASTER_3}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_MASTER_3}
      <<: *restart-policy


  data-1:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_data_1:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      node.name: data-1
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.data == true
      mode: replicated
      replicas: ${ES_REPLICAS_DATA_1}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_DATA_1}
      <<: *restart-policy

  data-2:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_data_2:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      node.name: data-2
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.data == true
      mode: replicated
      replicas: ${ES_REPLICAS_DATA_2}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_DATA_2}
      <<: *restart-policy

  data-3:
    <<: [*elasticsearch-base-image, *networks, *healthcheck, *ulimits]
    volumes:
      - elasticsearch_data_3:${ES_DATA_DIR}
    environment:
      <<: *elasticsearch-default-env
      ES_JAVA_OPTS: ${ES_JAVA_OPTS}
      node.name: data-3
    deploy:
      placement:
        constraints:
          - node.labels.elasticsearch == true
          - node.labels.data == true
      mode: replicated
      replicas: ${ES_REPLICAS_DATA_3}
      resources:
        limits:
          memory: ${ES_MEMORY_LIMIT_DATA_3}
      <<: *restart-policy


networks:
  elasticsearch:
    driver: overlay
    attachable: true
  traefik:
    external: true


volumes:
  elasticsearch_master_1:
  elasticsearch_master_2:
  elasticsearch_master_3:
  elasticsearch_data_1:
  elasticsearch_data_2:
  elasticsearch_data_3:
